name: Deploy prod
on:
  push:
    branches:
      - 'master'
jobs:
  deploy:
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    env:
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
      TF_VAR_github_token: ${{ secrets.GITHUB_TOKEN }}
      TERRAFORM_WORKDIR: terraform
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.PAT }}

      - uses: olafurpg/setup-scala@v6
        with:
          java-version: openjdk@1.14

      - name: Cache SBT
        uses: actions/cache@v2
        with:
          path: |
            ~/.ivy2/cache
            ~/.sbt
          key: ${{ runner.os }}-sbt-${{ hashFiles('**/build.sbt') }}

      - name: Run tests
        run: sbt clean coverage test coverageReport

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1

      - name: Increment version, tag, build an artifact and push it to GitHub package registry
        id: sbt-release
        outputs:
          tag:
            description: 'Latest tag'
        run: |
          git config user.email "alexander.melashchenko@gmail.com"
          git config user.name "GitHub Actions"
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u melalex --password-stdin
          sbt 'release skip-tests with-defaults'
          echo "::set-output name=latest-tag::$(git describe --abbrev=0)"

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.sbt-release.outputs.tag }}
          release_name: Release ${{ steps.sbt-release.outputs.tag }}
          body_path: target/changelog/CHANGELOG.md
          draft: false
          prerelease: false

      - name: Install ansible
        run: |
          sudo apt update
          sudo apt install software-properties-common
          sudo apt-add-repository --yes --update ppa:ansible/ansible
          sudo apt install ansible

      - uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        id: init
        run: terraform init ${{ env.TERRAFORM_WORKDIR }}

      - name: Terraform Apply
        id: apply
        continue-on-error: true
        run: terraform apply -no-color -auto-approve ${{ env.TERRAFORM_WORKDIR }}
